plugins {
  id "quran.android.application"
  id 'org.jetbrains.kotlin.kapt'
  id 'org.jetbrains.kotlin.plugin.parcelize'
  alias libs.plugins.ksp
  alias libs.plugins.errorprone
  alias libs.plugins.anvil
}

if (getGradle().getStartParameter().getTaskRequests().toString().contains("Release") &&
    !project.hasProperty("disableFirebase") && !project.hasProperty("disableCrashlytics")) {
  apply plugin: 'com.google.gms.google-services'
  apply plugin: 'com.google.firebase.crashlytics'
}

android {
  namespace 'com.quran.labs.androidquran'

  defaultConfig {
    versionCode 3430
    versionName "3.4.3"
    testInstrumentationRunner "com.quran.labs.androidquran.core.QuranTestRunner"
  }

  buildFeatures.buildConfig = true

  signingConfigs {
    release {
      storeFile file(STORE_FILE)
      storePassword STORE_PASSWORD
      keyAlias KEY_ALIAS
      keyPassword KEY_PASSWORD
    }
  }

  flavorDimensions = ["pageType"]
  productFlavors {
    madani {
      applicationId "com.quran.labs.androidquran"
    }
  }

  buildTypes {
    beta {
      minifyEnabled true
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard.cfg'
      signingConfig signingConfigs.release
      versionNameSuffix "-beta"
      matchingFallbacks = ['debug']
    }

    debug {
      applicationIdSuffix ".debug"
      versionNameSuffix "-debug"
    }

    release {
      minifyEnabled true
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard.cfg'
      signingConfig signingConfigs.release
    }
  }

  applicationVariants.configureEach { variant ->
    resValue "string", "authority", applicationId + '.data.QuranDataProvider'
    resValue "string", "file_authority", applicationId + '.fileprovider'
    if (applicationId.endsWith("debug")) {
      mergedFlavor.manifestPlaceholders = [app_debug_label: "Quran " + flavorName.capitalize()]
    }
  }

  kotlinOptions {
    freeCompilerArgs += [ "-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi" ]
  }

  testOptions {
    unitTests {
      includeAndroidResources = true
      all {
        testLogging {
          events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
          outputs.upToDateWhen { false }
          showStandardStreams true
          exceptionFormat "full"
        }
      }
    }
  }

  packagingOptions {
    resources {
      excludes += ['META-INF/*.kotlin_module', 'META-INF/DEPENDENCIES', 'META-INF/INDEX.LIST']
    }
  }
}

// required so that Errorprone doesn't look at generated files
afterEvaluate {
  tasks.withType(JavaCompile).configureEach {
    options.errorprone.excludedPaths = ".*/build/generated/.*"
    options.errorprone.disableWarningsInGeneratedCode = true
  }
}

if (new File(rootDir, 'extras/extras.gradle').exists()) {
   apply from: new File(rootDir, 'extras/extras.gradle')
} else {
   apply from: 'pluggable.gradle'
}

dependencies {
  implementation project(path: ':common:analytics')
  implementation project(path: ':common:audio')
  implementation project(path: ':common:bookmark')
  implementation project(path: ':common:data')
  implementation project(path: ':common:di')
  implementation project(path: ':common:download')
  implementation project(path: ':common:networking')
  implementation project(path: ':common:pages')
  implementation project(path: ':common:preference')
  implementation project(path: ':common:reading')
  implementation project(path: ':common:recitation')
  implementation project(path: ':common:search')
  implementation project(path: ':common:toolbar')
  implementation project(path: ':common:translation')
  implementation project(path: ':common:upgrade')
  implementation project(path: ':common:ui:core')

  implementation project(path: ':feature:audio')
  implementation project(path: ':feature:downloadmanager')
  implementation project(path: ':feature:qarilist')

  implementation libs.kotlinx.coroutines.core
  implementation libs.kotlinx.coroutines.android

  implementation libs.retrofit
  implementation libs.converter.moshi

  implementation libs.androidx.appcompat
  implementation libs.androidx.media
  implementation libs.androidx.localbroadcastmanager
  implementation libs.androidx.preference.ktx
  implementation libs.androidx.recyclerview
  implementation libs.material
  implementation libs.androidx.swiperefreshlayout

  // okio
  implementation libs.okio

  // rx
  implementation libs.rxjava
  implementation libs.rxandroid

  // dagger
  kapt libs.dagger.compiler
  kaptTest libs.dagger.compiler
  implementation libs.dagger.runtime

  // workmanager
  implementation libs.androidx.work.runtime.ktx

  implementation libs.okhttp

  implementation libs.moshi
  ksp(libs.moshi.codegen)

  implementation libs.insetter
  implementation libs.timber
  debugImplementation libs.leakcanary.android

  testImplementation libs.junit
  testImplementation libs.truth
  testImplementation libs.mockito.core
  testImplementation libs.okhttp.mockserver
  testImplementation libs.junit.ktx
  testImplementation libs.robolectric
  testImplementation libs.espresso.core
  testImplementation libs.espresso.intents
  testImplementation libs.turbine
  testImplementation libs.kotlinx.coroutines.test

  errorprone libs.errorprone.core

  // Number Picker
  implementation libs.number.picker
}
